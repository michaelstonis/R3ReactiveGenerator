{
  Sources: [
    {
      FileName: ObservableAsPropertyAttribute.g.cs,
      Source:
// <auto-generated/>
using System;

[AttributeUsage(AttributeTargets.Property, Inherited = false, AllowMultiple = false)]
sealed class ObservableAsPropertyAttribute : Attribute
{
    public ObservableAsPropertyAttribute() { }
}

    },
    {
      FileName: ViewModel.ObservableAsProperty.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System;
using ReactiveUI;

public partial class ViewModel<T, TKey> where T : class, IDisposable where TKey : notnull
{
    private ObservableAsPropertyHelper<T?> _computedValueHelper;

    public partial T? ComputedValue
    {
        get => _computedValueHelper.Value;
    }

    private ObservableAsPropertyHelper<TKey> _currentKeyHelper;

    public partial TKey CurrentKey
    {
        get => _currentKeyHelper.Value;
    }
}

    }
  ],
  Diagnostics: null
}