{
  Sources: [
    {
      FileName: BaseClass.INPC.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System.ComponentModel;
using System.Runtime.CompilerServices;

public partial class BaseClass : INotifyPropertyChanged
{
    public event PropertyChangedEventHandler? PropertyChanged;

    protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    protected virtual void OnPropertyChanged(PropertyChangedEventArgs args)
    {
        PropertyChanged?.Invoke(this, args);
    }
}

    },
    {
      FileName: BaseClass.ReactiveProperties.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System.ComponentModel;
using System.Runtime.CompilerServices;

/// <summary>
/// A partial class implementation for BaseClass.
/// </summary>
public partial class BaseClass
{
    private string _baseProp;

    private static readonly PropertyChangedEventArgs _basePropChangedEventArgs = new PropertyChangedEventArgs(nameof(BaseProp));

    public partial string BaseProp
    {
        get => _baseProp;
        set
        {
            if (!Equals(_baseProp, value))
            {
                _baseProp = value;
                OnPropertyChanged(_basePropChangedEventArgs);
            }
        }
    }
}

    },
    {
      FileName: DerivedClass.ReactiveProperties.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System.ComponentModel;
using System.Runtime.CompilerServices;

/// <summary>
/// A partial class implementation for DerivedClass.
/// </summary>
public partial class DerivedClass
{
    private string _derivedProp;

    private static readonly PropertyChangedEventArgs _derivedPropChangedEventArgs = new PropertyChangedEventArgs(nameof(DerivedProp));

    public partial string DerivedProp
    {
        get => _derivedProp;
        set
        {
            if (!Equals(_derivedProp, value))
            {
                _derivedProp = value;
                OnPropertyChanged(_derivedPropChangedEventArgs);
            }
        }
    }
}

    },
    {
      FileName: IgnoreReactiveAttribute.g.cs,
      Source:
using System;

[AttributeUsage(AttributeTargets.Property | AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
sealed class IgnoreReactiveAttribute : Attribute
{
    public IgnoreReactiveAttribute() { }
}
    },
    {
      FileName: ReactiveAttribute.g.cs,
      Source:
using System;

[AttributeUsage(AttributeTargets.Property | AttributeTargets.Class, Inherited = true, AllowMultiple = false)]
sealed class ReactiveAttribute : Attribute
{
    public ReactiveAttribute() { }
}
    }
  ],
  Diagnostics: null
}