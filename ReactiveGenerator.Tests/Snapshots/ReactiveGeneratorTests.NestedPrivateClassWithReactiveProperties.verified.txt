{
  Sources: [
    {
      FileName: IgnoreReactiveAttribute.g.cs,
      Source:
using System;

[AttributeUsage(AttributeTargets.Property | AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
sealed class IgnoreReactiveAttribute : Attribute
{
    public IgnoreReactiveAttribute() { }
}
    },
    {
      FileName: OuterClass.PrivateInnerClass.INPC.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System.ComponentModel;
using System.Runtime.CompilerServices;

public partial class OuterClass
{
    private partial class PrivateInnerClass : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler? PropertyChanged;

        protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        protected virtual void OnPropertyChanged(PropertyChangedEventArgs args)
        {
            PropertyChanged?.Invoke(this, args);
        }
    }
}

    },
    {
      FileName: OuterClass.PrivateInnerClass.ReactiveProperties.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System.ComponentModel;
using System.Runtime.CompilerServices;

public partial class OuterClass
{
    private partial class PrivateInnerClass
    {
        private static readonly PropertyChangedEventArgs _innerPropChangedEventArgs = new PropertyChangedEventArgs(nameof(InnerProp));
        private static readonly PropertyChangedEventArgs _privateInnerPropChangedEventArgs = new PropertyChangedEventArgs(nameof(PrivateInnerProp));

        public partial string InnerProp
        {
            get => field;
            set
            {
                if (!Equals(field, value))
                {
                    field = value;
                    OnPropertyChanged(_innerPropChangedEventArgs);
                }
            }
        }

        private partial int PrivateInnerProp
        {
            get => field;
            set
            {
                if (!Equals(field, value))
                {
                    field = value;
                    OnPropertyChanged(_privateInnerPropChangedEventArgs);
                }
            }
        }
    }
}

    },
    {
      FileName: OuterClass.ProtectedInnerClass.INPC.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System.ComponentModel;
using System.Runtime.CompilerServices;

public partial class OuterClass
{
    protected partial class ProtectedInnerClass : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler? PropertyChanged;

        protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        protected virtual void OnPropertyChanged(PropertyChangedEventArgs args)
        {
            PropertyChanged?.Invoke(this, args);
        }
    }
}

    },
    {
      FileName: OuterClass.ProtectedInnerClass.ReactiveProperties.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System.ComponentModel;
using System.Runtime.CompilerServices;

public partial class OuterClass
{
    protected partial class ProtectedInnerClass
    {
        private static readonly PropertyChangedEventArgs _protectedClassPropChangedEventArgs = new PropertyChangedEventArgs(nameof(ProtectedClassProp));

        public partial string ProtectedClassProp
        {
            get => field;
            set
            {
                if (!Equals(field, value))
                {
                    field = value;
                    OnPropertyChanged(_protectedClassPropChangedEventArgs);
                }
            }
        }
    }
}

    },
    {
      FileName: ReactiveAttribute.g.cs,
      Source:
using System;

[AttributeUsage(AttributeTargets.Property | AttributeTargets.Class, Inherited = true, AllowMultiple = false)]
sealed class ReactiveAttribute : Attribute
{
    public ReactiveAttribute() { }
}
    }
  ],
  Diagnostics: null
}