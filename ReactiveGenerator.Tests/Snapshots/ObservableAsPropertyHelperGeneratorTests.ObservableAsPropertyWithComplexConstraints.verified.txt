{
  Sources: [
    {
      FileName: Container.ObservableAsProperty.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System;
using ReactiveUI;

public partial class Container<T, U, V> where T : class? where U : struct, IComparable<U> where V : unmanaged, struct
{
    private ObservableAsPropertyHelper<T?> _nullableRefHelper;

    public partial T? NullableRef
    {
        get => _nullableRefHelper.Value;
    }

    private ObservableAsPropertyHelper<U> _valueTypeHelper;

    public partial U ValueType
    {
        get => _valueTypeHelper.Value;
    }

    private ObservableAsPropertyHelper<V> _unmanagedValueHelper;

    public partial V UnmanagedValue
    {
        get => _unmanagedValueHelper.Value;
    }
}

    },
    {
      FileName: ObservableAsPropertyAttribute.g.cs,
      Source:
// <auto-generated/>
using System;

[AttributeUsage(AttributeTargets.Property, Inherited = false, AllowMultiple = false)]
sealed class ObservableAsPropertyAttribute : Attribute
{
    public ObservableAsPropertyAttribute() { }
}

    }
  ],
  Diagnostics: null
}