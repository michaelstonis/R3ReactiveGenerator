{
  Sources: [
    {
      FileName: PropertyObserver.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System;
using System.Collections.Concurrent;
using System.ComponentModel;
using System.Threading;

namespace ReactiveGenerator.Internal
{
    internal sealed class PropertyObserver<TSource, TProperty> : IObservable<TProperty>, IDisposable
        where TSource : INotifyPropertyChanged
    {
        private readonly object _gate = new object();
        private readonly TSource _source;
        private readonly string _propertyName;
        private readonly Func<TProperty> _getter;
        private bool _isDisposed;
        private readonly ConcurrentDictionary<Subscription, byte> _subscriptions;
        private readonly PropertyChangedEventHandler _handler;
        private readonly WeakEventManager<PropertyChangedEventHandler> _weakEventManager;

        public PropertyObserver(TSource source, string propertyName, Func<TProperty> getter)
        {
            if (source == null) throw new ArgumentNullException(nameof(source));
            if (propertyName == null) throw new ArgumentNullException(nameof(propertyName));
            if (getter == null) throw new ArgumentNullException(nameof(getter));

            _source = source;
            _propertyName = propertyName;
            _getter = getter;
            _subscriptions = new ConcurrentDictionary<Subscription, byte>();
            _handler = HandlePropertyChanged;
            _weakEventManager = new WeakEventManager<PropertyChangedEventHandler>(
                (obj, h) => ((INotifyPropertyChanged)obj).PropertyChanged += h,
                (obj, h) => ((INotifyPropertyChanged)obj).PropertyChanged -= h
            );
        }

        public IDisposable Subscribe(IObserver<TProperty> observer)
        {
            if (observer == null) throw new ArgumentNullException(nameof(observer));

            lock (_gate)
            {
                if (_isDisposed)
                {
                    observer.OnCompleted();
                    return Disposable.Empty;
                }

                var subscription = new Subscription(this, observer);
                _subscriptions.TryAdd(subscription, 0);

                try
                {
                    observer.OnNext(_getter());
                    _weakEventManager.AddEventHandler(_source, _handler);
                }
                catch (Exception ex)
                {
                    observer.OnError(ex);
                    subscription.Dispose();
                    return Disposable.Empty;
                }

                return subscription;
            }
        }

        private void HandlePropertyChanged(object? sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName != _propertyName && !string.IsNullOrEmpty(e.PropertyName))
                return;

            foreach (var subscription in _subscriptions.Keys)
            {
                var obs = subscription.Observer;
                if (obs == null)
                {
                    subscription.Dispose();
                    continue;
                }

                try
                {
                    obs.OnNext(_getter());
                }
                catch (Exception ex)
                {
                    obs.OnError(ex);
                    subscription.Dispose();
                }
            }
        }

        public void Dispose()
        {
            lock (_gate)
            {
                if (!_isDisposed)
                {
                    _weakEventManager.RemoveEventHandler(_source, _handler);
                    foreach (var subscription in _subscriptions.Keys)
                    {
                        subscription.DisposeInternal();
                    }
                    _subscriptions.Clear();
                    _isDisposed = true;
                }
            }
        }

        private sealed class Subscription : IDisposable
        {
            private readonly PropertyObserver<TSource, TProperty> _parent;
            private readonly WeakReference<IObserver<TProperty>> _weakObserver;
            private int _disposed;

            public Subscription(PropertyObserver<TSource, TProperty> parent, IObserver<TProperty> observer)
            {
                _parent = parent;
                _weakObserver = new WeakReference<IObserver<TProperty>>(observer);
            }

            public IObserver<TProperty>? Observer
            {
                get => _weakObserver.TryGetTarget(out var obs) ? obs : null;
            }

            public void Dispose()
            {
                if (Interlocked.Exchange(ref _disposed, 1) == 0)
                {
                    lock (_parent._gate)
                    {
                        if (!_parent._isDisposed)
                        {
                            _parent._subscriptions.TryRemove(this, out _);
                            if (_parent._subscriptions.IsEmpty)
                            {
                                _parent.Dispose();
                            }
                        }
                    }
                }
            }

            public void DisposeInternal()
            {
                Interlocked.Exchange(ref _disposed, 1);
            }
        }

        private sealed class Disposable : IDisposable
        {
            public static readonly IDisposable Empty = new Disposable();
            private Disposable() { }
            public void Dispose() { }
        }
    }
}
    },
    {
      FileName: TestClass.WhenAnyValue.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System;
using System.ComponentModel;
using System.Threading;
using ReactiveGenerator.Internal;

public static class TestClassExtensions
{
    public static IObservable<string?> WhenAnyPublicProp(
        this global::TestClass source)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));

        return new PropertyObserver<global::TestClass, string?>(
            source,
            "PublicProp",
            () => source.PublicProp);
    }

    public static IObservable<string?> WhenAnyProtectedProp(
        this global::TestClass source)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));

        return new PropertyObserver<global::TestClass, string?>(
            source,
            "ProtectedProp",
            () => source.ProtectedProp);
    }

    public static IObservable<string?> WhenAnyInternalProp(
        this global::TestClass source)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));

        return new PropertyObserver<global::TestClass, string?>(
            source,
            "InternalProp",
            () => source.InternalProp);
    }

    public static IObservable<string?> WhenAnyPrivateProp(
        this global::TestClass source)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));

        return new PropertyObserver<global::TestClass, string?>(
            source,
            "PrivateProp",
            () => source.PrivateProp);
    }
}

    },
    {
      FileName: WeakEventManager.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System;
using System.Collections.Concurrent;
using System.Runtime.CompilerServices;

namespace ReactiveGenerator.Internal
{
    internal sealed class WeakEventManager<TDelegate> where TDelegate : class, Delegate
    {
        private readonly ConditionalWeakTable<object, EventRegistrationList> _registrations =
            new ConditionalWeakTable<object, EventRegistrationList>();

        private readonly Action<object, TDelegate> _addHandler;
        private readonly Action<object, TDelegate> _removeHandler;

        public WeakEventManager(Action<object, TDelegate> addHandler, Action<object, TDelegate> removeHandler)
        {
            _addHandler = addHandler ?? throw new ArgumentNullException(nameof(addHandler));
            _removeHandler = removeHandler ?? throw new ArgumentNullException(nameof(removeHandler));
        }

        public void AddEventHandler(object source, TDelegate handler)
        {
            if (source == null) throw new ArgumentNullException(nameof(source));
            if (handler == null) throw new ArgumentNullException(nameof(handler));

            var list = _registrations.GetOrCreateValue(source);
            var registration = new WeakEventRegistration(source, handler, _removeHandler);
            list.Add(registration);
            _addHandler(source, handler);
        }

        public void RemoveEventHandler(object source, TDelegate handler)
        {
            if (source == null) throw new ArgumentNullException(nameof(source));
            if (handler == null) throw new ArgumentNullException(nameof(handler));

            if (_registrations.TryGetValue(source, out var list))
            {
                list.Remove(handler);
            }
        }

        private sealed class EventRegistrationList
        {
            private readonly ConcurrentDictionary<TDelegate, WeakEventRegistration> _registrations =
                new ConcurrentDictionary<TDelegate, WeakEventRegistration>();

            public void Add(WeakEventRegistration registration)
            {
                _registrations[registration.Handler] = registration;
            }

            public void Remove(TDelegate handler)
            {
                if (_registrations.TryRemove(handler, out var registration))
                {
                    registration.Unsubscribe();
                }
            }
        }

        private sealed class WeakEventRegistration
        {
            private readonly WeakReference _sourceReference;
            private readonly WeakReference<TDelegate> _handlerReference;
            private readonly Action<object, TDelegate> _removeHandler;

            public WeakEventRegistration(object source, TDelegate handler, Action<object, TDelegate> removeHandler)
            {
                _sourceReference = new WeakReference(source);
                _handlerReference = new WeakReference<TDelegate>(handler);
                _removeHandler = removeHandler;
            }

            public TDelegate Handler
            {
                get
                {
                    _handlerReference.TryGetTarget(out var handler);
                    return handler!;
                }
            }

            public void Unsubscribe()
            {
                if (_handlerReference.TryGetTarget(out var handler) && _sourceReference.Target is object source)
                {
                    _removeHandler(source, handler);
                }
            }
        }
    }
}
    }
  ],
  Diagnostics: null
}