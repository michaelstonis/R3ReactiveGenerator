{
  Sources: [
    {
      FileName: IgnoreReactiveAttribute.g.cs,
      Source:
// <auto-generated/>
using System;

[AttributeUsage(AttributeTargets.Property | AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
sealed class IgnoreReactiveAttribute : Attribute
{
    public IgnoreReactiveAttribute() { }
}
    },
    {
      FileName: OuterClass.InnerClass.INPC.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System.ComponentModel;
using System.Runtime.CompilerServices;

public partial class OuterClass
{
    public partial class InnerClass : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler? PropertyChanged;

        protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        protected virtual void OnPropertyChanged(PropertyChangedEventArgs args)
        {
            PropertyChanged?.Invoke(this, args);
        }
    }
}

    },
    {
      FileName: OuterClass.InnerClass.ReactiveProperties.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System.ComponentModel;
using System.Runtime.CompilerServices;

public partial class OuterClass
{
    /// <summary>
    /// A partial class implementation for OuterClass.InnerClass.
    /// </summary>
    public partial class InnerClass
    {
        private string _innerProp;

        private static readonly PropertyChangedEventArgs _innerPropChangedEventArgs = new PropertyChangedEventArgs(nameof(InnerProp));

        public partial string InnerProp
        {
            get => _innerProp;
            set
            {
                if (!Equals(_innerProp, value))
                {
                    _innerProp = value;
                    OnPropertyChanged(_innerPropChangedEventArgs);
                }
            }
        }
    }
}

    },
    {
      FileName: OuterClass.INPC.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System.ComponentModel;
using System.Runtime.CompilerServices;

public partial class OuterClass : INotifyPropertyChanged
{
    public event PropertyChangedEventHandler? PropertyChanged;

    protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    protected virtual void OnPropertyChanged(PropertyChangedEventArgs args)
    {
        PropertyChanged?.Invoke(this, args);
    }
}

    },
    {
      FileName: OuterClass.ReactiveProperties.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System.ComponentModel;
using System.Runtime.CompilerServices;

/// <summary>
/// A partial class implementation for OuterClass.
/// </summary>
public partial class OuterClass
{
    private string _outerProp;

    private static readonly PropertyChangedEventArgs _outerPropChangedEventArgs = new PropertyChangedEventArgs(nameof(OuterProp));

    public partial string OuterProp
    {
        get => _outerProp;
        set
        {
            if (!Equals(_outerProp, value))
            {
                _outerProp = value;
                OnPropertyChanged(_outerPropChangedEventArgs);
            }
        }
    }
}

    },
    {
      FileName: ReactiveAttribute.g.cs,
      Source:
// <auto-generated/>
using System;

[AttributeUsage(AttributeTargets.Property | AttributeTargets.Class, Inherited = true, AllowMultiple = false)]
sealed class ReactiveAttribute : Attribute
{
    public ReactiveAttribute() { }
}
    }
  ],
  Diagnostics: null
}