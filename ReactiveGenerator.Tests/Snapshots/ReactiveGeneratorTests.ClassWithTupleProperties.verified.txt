{
  Sources: [
    {
      FileName: IgnoreReactiveAttribute.g.cs,
      Source:
using System;

[AttributeUsage(AttributeTargets.Property, Inherited = false, AllowMultiple = false)]
sealed class IgnoreReactiveAttribute : Attribute
{
    public IgnoreReactiveAttribute() { }
}
    },
    {
      FileName: ReactiveAttribute.g.cs,
      Source:
using System;

[AttributeUsage(AttributeTargets.Property | AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
sealed class ReactiveAttribute : Attribute
{
    public ReactiveAttribute() { }
}
    },
    {
      FileName: TestClass.INPC.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System.ComponentModel;
using System.Runtime.CompilerServices;

public partial class TestClass : INotifyPropertyChanged
{
    public event PropertyChangedEventHandler? PropertyChanged;

    protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    protected virtual void OnPropertyChanged(PropertyChangedEventArgs args)
    {
        PropertyChanged?.Invoke(this, args);
    }
}

    },
    {
      FileName: TestClass.ReactiveProperties.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System.ComponentModel;
using System.Runtime.CompilerServices;

/// <summary>
/// A partial class implementation for TestClass.
/// </summary>
public partial class TestClass
{
    private static readonly PropertyChangedEventArgs _personInfoChangedEventArgs = new PropertyChangedEventArgs(nameof(PersonInfo));
    private static readonly PropertyChangedEventArgs _pointChangedEventArgs = new PropertyChangedEventArgs(nameof(Point));

    public partial (string Name, int Age) PersonInfo
    {
        get => field;
        set
        {
            if (!Equals(field, value))
            {
                field = value;
                OnPropertyChanged(_personInfoChangedEventArgs);
            }
        }
    }

    public partial (int X, int Y, string Label) Point
    {
        get => field;
        set
        {
            if (!Equals(field, value))
            {
                field = value;
                OnPropertyChanged(_pointChangedEventArgs);
            }
        }
    }
}

    }
  ],
  Diagnostics: null
}