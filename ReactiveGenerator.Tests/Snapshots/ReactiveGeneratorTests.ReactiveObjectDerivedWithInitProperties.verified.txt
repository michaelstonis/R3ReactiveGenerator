{
  Sources: [
    {
      FileName: IgnoreReactiveAttribute.g.cs,
      Source:
using System;

[AttributeUsage(AttributeTargets.Property, Inherited = false, AllowMultiple = false)]
sealed class IgnoreReactiveAttribute : Attribute
{
    public IgnoreReactiveAttribute() { }
}
    },
    {
      FileName: ReactiveAttribute.g.cs,
      Source:
using System;

[AttributeUsage(AttributeTargets.Property | AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
sealed class ReactiveAttribute : Attribute
{
    public ReactiveAttribute() { }
}
    },
    {
      FileName: TestViewModel.INPC.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System.ComponentModel;
using System.Runtime.CompilerServices;

/// <summary>
/// A partial class implementation of <see cref="INotifyPropertyChanged"/> for <see cref="TestViewModel"/>.
/// </summary>
public partial class TestViewModel : INotifyPropertyChanged
{
    /// <summary>
    /// Occurs when a property value changes.
    /// </summary>
    /// <seealso cref="INotifyPropertyChanged"/>
    public event PropertyChangedEventHandler? PropertyChanged;

    /// <summary>
    /// Raises the <see cref="PropertyChanged"/> event.
    /// </summary>
    /// <param name="propertyName">The name of the property that changed.</param>
    protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    /// <summary>
    /// Raises the <see cref="PropertyChanged"/> event.
    /// </summary>
    /// <param name="args">The <see cref="PropertyChangedEventArgs"/> instance containing the event data.</param>
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs args)
    {
        PropertyChanged?.Invoke(this, args);
    }
}

    },
    {
      FileName: TestViewModel.ReactiveProperties.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System.ComponentModel;
using System.Runtime.CompilerServices;

/// <summary>
/// A partial class implementation for TestViewModel.
/// </summary>
public partial class TestViewModel
{
    private static readonly PropertyChangedEventArgs _readWritePropChangedEventArgs = new PropertyChangedEventArgs(nameof(ReadWriteProp));
    private static readonly PropertyChangedEventArgs _initOnlyPropChangedEventArgs = new PropertyChangedEventArgs(nameof(InitOnlyProp));
    private static readonly PropertyChangedEventArgs _getOnlyPropChangedEventArgs = new PropertyChangedEventArgs(nameof(GetOnlyProp));

    /// <summary>
    /// Gets or sets a value of type string.
    /// </summary>
    /// <value>The value of type string.</value>
    public partial string ReadWriteProp
    {
        get => field;
        set
        {
            if (!Equals(field, value))
            {
                field = value;
                OnPropertyChanged(_readWritePropChangedEventArgs);
            }
        }
    }

    /// <summary>
    /// Gets or sets a value of type string.
    /// </summary>
    /// <value>The value of type string.</value>
    public partial string InitOnlyProp
    {
        get => field;
        set
        {
            if (!Equals(field, value))
            {
                field = value;
                OnPropertyChanged(_initOnlyPropChangedEventArgs);
            }
        }
    }

    /// <summary>
    /// Gets or sets a value of type string.
    /// </summary>
    /// <value>The value of type string.</value>
    public partial string GetOnlyProp
    {
        get => field;
    }
}

    }
  ],
  Diagnostics: null
}