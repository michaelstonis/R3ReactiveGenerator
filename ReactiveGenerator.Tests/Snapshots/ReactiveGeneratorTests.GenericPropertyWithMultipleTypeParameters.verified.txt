{
  Sources: [
    {
      FileName: GenericViewModel.INPC.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System.ComponentModel;
using System.Runtime.CompilerServices;

internal partial class GenericViewModel<T, U> : INotifyPropertyChanged where T : class where U : struct
{
    public event PropertyChangedEventHandler? PropertyChanged;

    /// <summary>
    /// Raises the <see cref="PropertyChanged"/> event.
    /// </summary>
    /// <param name="propertyName">The name of the property that changed.</param>
    protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    /// <summary>
    /// Raises the <see cref="PropertyChanged"/> event.
    /// </summary>
    /// <param name="args">The <see cref="PropertyChangedEventArgs"/> instance containing the event data.</param>
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs args)
    {
        PropertyChanged?.Invoke(this, args);
    }
}

    },
    {
      FileName: GenericViewModel.ReactiveProperties.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System.ComponentModel;
using System.Runtime.CompilerServices;

internal partial class GenericViewModel<T, U> where T : class where U : struct
{
    private static readonly PropertyChangedEventArgs _refValueChangedEventArgs = new PropertyChangedEventArgs(nameof(RefValue));
    private static readonly PropertyChangedEventArgs _valueTypeChangedEventArgs = new PropertyChangedEventArgs(nameof(ValueType));

    /// <summary>
    /// Gets or sets a value of type T.
    /// </summary>
    /// <value>The value of type T.</value>
    public partial T? RefValue
    {
        get => field;
        set
        {
            if (!Equals(field, value))
            {
                field = value;
                OnPropertyChanged(_refValueChangedEventArgs);
            }
        }
    }

    /// <summary>
    /// Gets or sets a value of type U.
    /// </summary>
    /// <value>The value of type U.</value>
    public partial U ValueType
    {
        get => field;
        set
        {
            if (!Equals(field, value))
            {
                field = value;
                OnPropertyChanged(_valueTypeChangedEventArgs);
            }
        }
    }
}

    },
    {
      FileName: IgnoreReactiveAttribute.g.cs,
      Source:
using System;

[AttributeUsage(AttributeTargets.Property, Inherited = false, AllowMultiple = false)]
sealed class IgnoreReactiveAttribute : Attribute
{
    public IgnoreReactiveAttribute() { }
}
    },
    {
      FileName: ReactiveAttribute.g.cs,
      Source:
using System;

[AttributeUsage(AttributeTargets.Property | AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
sealed class ReactiveAttribute : Attribute
{
    public ReactiveAttribute() { }
}
    }
  ],
  Diagnostics: null
}