{
  Sources: [
    {
      FileName: ObservableAsPropertyAttribute.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System;

namespace ReactiveGenerator
{
    [AttributeUsage(AttributeTargets.Property, Inherited = false, AllowMultiple = false)]
    public sealed class ObservableAsPropertyAttribute : Attribute
    {
        public ObservableAsPropertyAttribute() { }
    }
}
    },
    {
      FileName: TestViewModel.ObservableAsProperty.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System;
using ReactiveUI;

public partial class TestViewModel<T, U> where T : class, new() where U : struct, IComparable<U>
{
    private ObservableAsPropertyHelper<T?> _referenceValueHelper;

    public partial T? ReferenceValue
    {
        get => _referenceValueHelper.Value;
    }

    private ObservableAsPropertyHelper<U> _valueTypeHelper;

    public partial U ValueType
    {
        get => _valueTypeHelper.Value;
    }
}

    }
  ],
  Diagnostics: null
}