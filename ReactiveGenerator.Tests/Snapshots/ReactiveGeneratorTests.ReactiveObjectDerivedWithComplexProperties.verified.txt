{
  Sources: [
    {
      FileName: IgnoreReactiveAttribute.g.cs,
      Source:
using System;

[AttributeUsage(AttributeTargets.Property | AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
sealed class IgnoreReactiveAttribute : Attribute
{
    public IgnoreReactiveAttribute() { }
}
    },
    {
      FileName: ReactiveAttribute.g.cs,
      Source:
using System;

[AttributeUsage(AttributeTargets.Property | AttributeTargets.Class, Inherited = true, AllowMultiple = false)]
sealed class ReactiveAttribute : Attribute
{
    public ReactiveAttribute() { }
}
    },
    {
      FileName: TestViewModel.ReactiveProperties.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using ReactiveUI;

/// <summary>
/// A partial class implementation for TestViewModel.
/// </summary>
public partial class TestViewModel
{
    public partial global::System.Collections.ObjectModel.ObservableCollection<string> Items
    {
        get => field;
        set => this.RaiseAndSetIfChanged(ref field, value);
    }

    public partial Dictionary<string, List<int>> ComplexData
    {
        get => field;
        set => this.RaiseAndSetIfChanged(ref field, value);
    }

    public partial (string Name, int Count) TupleData
    {
        get => field;
        set => this.RaiseAndSetIfChanged(ref field, value);
    }
}

    }
  ],
  Diagnostics: null
}