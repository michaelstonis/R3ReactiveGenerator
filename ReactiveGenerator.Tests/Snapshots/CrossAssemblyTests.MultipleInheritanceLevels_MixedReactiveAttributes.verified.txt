{
  Sources: [
    {
      FileName: IgnoreReactiveAttribute.g.cs,
      Source:
using System;

[AttributeUsage(AttributeTargets.Property | AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
sealed class IgnoreReactiveAttribute : Attribute
{
    public IgnoreReactiveAttribute() { }
}
    },
    {
      FileName: MainLib.ChildClass.ReactiveProperties.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace MainLib
{
    /// <summary>
    /// A partial class implementation for MainLib.ChildClass.
    /// </summary>
    public partial class ChildClass
    {
        private static readonly PropertyChangedEventArgs _childPropChangedEventArgs = new PropertyChangedEventArgs(nameof(ChildProp));
        private static readonly PropertyChangedEventArgs _reactiveChildPropChangedEventArgs = new PropertyChangedEventArgs(nameof(ReactiveChildProp));

        public partial string ChildProp
        {
            get => field;
            set
            {
                if (!Equals(field, value))
                {
                    field = value;
                    OnPropertyChanged(_childPropChangedEventArgs);
                }
            }
        }

        public partial string ReactiveChildProp
        {
            get => field;
            set
            {
                if (!Equals(field, value))
                {
                    field = value;
                    OnPropertyChanged(_reactiveChildPropChangedEventArgs);
                }
            }
        }
    }
}

    },
    {
      FileName: MainLib.GrandchildClass.ReactiveProperties.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace MainLib
{
    /// <summary>
    /// A partial class implementation for MainLib.GrandchildClass.
    /// </summary>
    public partial class GrandchildClass
    {
        private static readonly PropertyChangedEventArgs _reactiveGrandchildPropChangedEventArgs = new PropertyChangedEventArgs(nameof(ReactiveGrandchildProp));

        public partial string ReactiveGrandchildProp
        {
            get => field;
            set
            {
                if (!Equals(field, value))
                {
                    field = value;
                    OnPropertyChanged(_reactiveGrandchildPropChangedEventArgs);
                }
            }
        }
    }
}

    },
    {
      FileName: ReactiveAttribute.g.cs,
      Source:
using System;

[AttributeUsage(AttributeTargets.Property | AttributeTargets.Class, Inherited = true, AllowMultiple = false)]
sealed class ReactiveAttribute : Attribute
{
    public ReactiveAttribute() { }
}
    }
  ],
  Diagnostics: null
}