{
  Sources: [
    {
      FileName: Base.INPC.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System.ComponentModel;
using System.Runtime.CompilerServices;

public partial class Base : INotifyPropertyChanged
{
    public event PropertyChangedEventHandler? PropertyChanged;

    protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    protected virtual void OnPropertyChanged(PropertyChangedEventArgs args)
    {
        PropertyChanged?.Invoke(this, args);
    }
}

    },
    {
      FileName: Base.ReactiveProperties.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System.ComponentModel;
using System.Runtime.CompilerServices;

/// <summary>
/// A partial class implementation for Base.
/// </summary>
public partial class Base
{
    private static readonly PropertyChangedEventArgs _staticPropChangedEventArgs = new PropertyChangedEventArgs(nameof(StaticProp));
    private static readonly PropertyChangedEventArgs _protectedStaticPropChangedEventArgs = new PropertyChangedEventArgs(nameof(ProtectedStaticProp));
    private static readonly PropertyChangedEventArgs _virtualPropChangedEventArgs = new PropertyChangedEventArgs(nameof(VirtualProp));
    private static readonly PropertyChangedEventArgs _abstractPropChangedEventArgs = new PropertyChangedEventArgs(nameof(AbstractProp));
    private static readonly PropertyChangedEventArgs _requiredPropChangedEventArgs = new PropertyChangedEventArgs(nameof(RequiredProp));
    private static readonly PropertyChangedEventArgs _requiredVirtualPropChangedEventArgs = new PropertyChangedEventArgs(nameof(RequiredVirtualProp));

    public static partial string StaticProp
    {
        get => field;
        set
        {
            if (!Equals(field, value))
            {
                field = value;
                OnPropertyChanged(_staticPropChangedEventArgs);
            }
        }
    }

    protected static partial string ProtectedStaticProp
    {
        get => field;
        set
        {
            if (!Equals(field, value))
            {
                field = value;
                OnPropertyChanged(_protectedStaticPropChangedEventArgs);
            }
        }
    }

    public virtual partial string VirtualProp
    {
        get => field;
        set
        {
            if (!Equals(field, value))
            {
                field = value;
                OnPropertyChanged(_virtualPropChangedEventArgs);
            }
        }
    }

    public abstract partial string AbstractProp
    {
        get => field;
        set
        {
            if (!Equals(field, value))
            {
                field = value;
                OnPropertyChanged(_abstractPropChangedEventArgs);
            }
        }
    }

    public required partial string RequiredProp
    {
        get => field;
        set
        {
            if (!Equals(field, value))
            {
                field = value;
                OnPropertyChanged(_requiredPropChangedEventArgs);
            }
        }
    }

    public virtual required partial string RequiredVirtualProp
    {
        get => field;
        set
        {
            if (!Equals(field, value))
            {
                field = value;
                OnPropertyChanged(_requiredVirtualPropChangedEventArgs);
            }
        }
    }
}

    },
    {
      FileName: Derived.ReactiveProperties.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System.ComponentModel;
using System.Runtime.CompilerServices;

/// <summary>
/// A partial class implementation for Derived.
/// </summary>
public partial class Derived
{
    private static readonly PropertyChangedEventArgs _virtualPropChangedEventArgs = new PropertyChangedEventArgs(nameof(VirtualProp));
    private static readonly PropertyChangedEventArgs _abstractPropChangedEventArgs = new PropertyChangedEventArgs(nameof(AbstractProp));
    private static readonly PropertyChangedEventArgs _requiredVirtualPropChangedEventArgs = new PropertyChangedEventArgs(nameof(RequiredVirtualProp));
    private static readonly PropertyChangedEventArgs _staticPropChangedEventArgs = new PropertyChangedEventArgs(nameof(StaticProp));

    public partial string VirtualProp
    {
        get => field;
        set
        {
            if (!Equals(field, value))
            {
                field = value;
                OnPropertyChanged(_virtualPropChangedEventArgs);
            }
        }
    }

    public override partial string AbstractProp
    {
        get => field;
        set
        {
            if (!Equals(field, value))
            {
                field = value;
                OnPropertyChanged(_abstractPropChangedEventArgs);
            }
        }
    }

    public override sealed partial string RequiredVirtualProp
    {
        get => field;
        set
        {
            if (!Equals(field, value))
            {
                field = value;
                OnPropertyChanged(_requiredVirtualPropChangedEventArgs);
            }
        }
    }

    public static partial string StaticProp
    {
        get => field;
        set
        {
            if (!Equals(field, value))
            {
                field = value;
                OnPropertyChanged(_staticPropChangedEventArgs);
            }
        }
    }
}

    },
    {
      FileName: IgnoreReactiveAttribute.g.cs,
      Source:
// <auto-generated/>
using System;

[AttributeUsage(AttributeTargets.Property | AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
sealed class IgnoreReactiveAttribute : Attribute
{
    public IgnoreReactiveAttribute() { }
}
    },
    {
      FileName: ReactiveAttribute.g.cs,
      Source:
// <auto-generated/>
using System;

[AttributeUsage(AttributeTargets.Property | AttributeTargets.Class, Inherited = true, AllowMultiple = false)]
sealed class ReactiveAttribute : Attribute
{
    public ReactiveAttribute() { }
}
    }
  ],
  Diagnostics: null
}