{
  Sources: [
    {
      FileName: Container.NestedReactiveViewModel.InnerViewModel.INPC.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System.ComponentModel;
using System.Runtime.CompilerServices;

public partial class Container
{
    public partial class NestedReactiveViewModel
    {
        private partial class InnerViewModel : INotifyPropertyChanged
        {
            public event PropertyChangedEventHandler? PropertyChanged;

            protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
            {
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
            }

            protected virtual void OnPropertyChanged(PropertyChangedEventArgs args)
            {
                PropertyChanged?.Invoke(this, args);
            }
        }
    }
}

    },
    {
      FileName: Container.NestedReactiveViewModel.InnerViewModel.ReactiveProperties.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System.ComponentModel;
using System.Runtime.CompilerServices;

public partial class Container
{
    public partial class NestedReactiveViewModel
    {
        private partial class InnerViewModel
        {
            private static readonly PropertyChangedEventArgs _innerPropChangedEventArgs = new PropertyChangedEventArgs(nameof(InnerProp));

            public partial string InnerProp
            {
                get => field;
                set
                {
                    if (!Equals(field, value))
                    {
                        field = value;
                        OnPropertyChanged(_innerPropChangedEventArgs);
                    }
                }
            }
        }
    }
}

    },
    {
      FileName: Container.NestedReactiveViewModel.INPC.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System.ComponentModel;
using System.Runtime.CompilerServices;

public partial class Container
{
    public partial class NestedReactiveViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler? PropertyChanged;

        protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        protected virtual void OnPropertyChanged(PropertyChangedEventArgs args)
        {
            PropertyChanged?.Invoke(this, args);
        }
    }
}

    },
    {
      FileName: Container.NestedReactiveViewModel.ReactiveProperties.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System.ComponentModel;
using System.Runtime.CompilerServices;

public partial class Container
{
    /// <summary>
    /// A partial class implementation for Container.NestedReactiveViewModel.
    /// </summary>
    public partial class NestedReactiveViewModel
    {
        private static readonly PropertyChangedEventArgs _viewModelPropChangedEventArgs = new PropertyChangedEventArgs(nameof(ViewModelProp));

        public partial string ViewModelProp
        {
            get => field;
            set
            {
                if (!Equals(field, value))
                {
                    field = value;
                    OnPropertyChanged(_viewModelPropChangedEventArgs);
                }
            }
        }
    }
}

    },
    {
      FileName: IgnoreReactiveAttribute.g.cs,
      Source:
using System;

[AttributeUsage(AttributeTargets.Property, Inherited = false, AllowMultiple = false)]
sealed class IgnoreReactiveAttribute : Attribute
{
    public IgnoreReactiveAttribute() { }
}
    },
    {
      FileName: ReactiveAttribute.g.cs,
      Source:
using System;

[AttributeUsage(AttributeTargets.Property | AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
sealed class ReactiveAttribute : Attribute
{
    public ReactiveAttribute() { }
}
    }
  ],
  Diagnostics: null
}