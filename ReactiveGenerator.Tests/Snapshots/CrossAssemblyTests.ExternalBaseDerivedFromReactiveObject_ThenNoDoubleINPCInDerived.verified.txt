{
  Sources: [
    {
      FileName: IgnoreReactiveAttribute.g.cs,
      Source:
using System;

[AttributeUsage(AttributeTargets.Property, Inherited = false, AllowMultiple = false)]
sealed class IgnoreReactiveAttribute : Attribute
{
    public IgnoreReactiveAttribute() { }
}
    },
    {
      FileName: MainLib.ChildViewModel.ReactiveProperties.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using ReactiveUI;

namespace MainLib
{
    /// <summary>
    /// A partial class implementation for MainLib.ChildViewModel.
    /// </summary>
    public partial class ChildViewModel
    {
        public partial int AnotherProp
        {
            get => field;
            set => this.RaiseAndSetIfChanged(ref field, value);
        }
    }
}

    },
    {
      FileName: ReactiveAttribute.g.cs,
      Source:
using System;

[AttributeUsage(AttributeTargets.Property | AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
sealed class ReactiveAttribute : Attribute
{
    public ReactiveAttribute() { }
}
    }
  ],
  Diagnostics: null
}