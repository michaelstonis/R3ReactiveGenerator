{
  Sources: [
    {
      FileName: IgnoreReactiveAttribute.g.cs,
      Source:
// <auto-generated/>
using System;

[AttributeUsage(AttributeTargets.Property | AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
sealed class IgnoreReactiveAttribute : Attribute
{
    public IgnoreReactiveAttribute() { }
}
    },
    {
      FileName: MainLib.DerivedClass.ReactiveProperties.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace MainLib
{
    /// <summary>
    /// A partial class implementation for MainLib.DerivedClass.
    /// </summary>
    public partial class DerivedClass
    {
        private static readonly PropertyChangedEventArgs _inheritedReactivePropChangedEventArgs = new PropertyChangedEventArgs(nameof(InheritedReactiveProp));
        private static readonly PropertyChangedEventArgs _explicitReactivePropChangedEventArgs = new PropertyChangedEventArgs(nameof(ExplicitReactiveProp));

        public partial string InheritedReactiveProp
        {
            get => field;
            set
            {
                if (!Equals(field, value))
                {
                    field = value;
                    OnPropertyChanged(_inheritedReactivePropChangedEventArgs);
                }
            }
        }

        public partial string ExplicitReactiveProp
        {
            get => field;
            set
            {
                if (!Equals(field, value))
                {
                    field = value;
                    OnPropertyChanged(_explicitReactivePropChangedEventArgs);
                }
            }
        }
    }
}

    },
    {
      FileName: ReactiveAttribute.g.cs,
      Source:
// <auto-generated/>
using System;

[AttributeUsage(AttributeTargets.Property | AttributeTargets.Class, Inherited = true, AllowMultiple = false)]
sealed class ReactiveAttribute : Attribute
{
    public ReactiveAttribute() { }
}
    }
  ],
  Diagnostics: null
}