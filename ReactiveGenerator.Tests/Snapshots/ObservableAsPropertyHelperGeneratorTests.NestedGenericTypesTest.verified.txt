{
  Sources: [
    {
      FileName: ObservableAsPropertyAttribute.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System;

namespace ReactiveGenerator
{
    [AttributeUsage(AttributeTargets.Property, Inherited = false, AllowMultiple = false)]
    public sealed class ObservableAsPropertyAttribute : Attribute
    {
        public ObservableAsPropertyAttribute() { }
    }
}
    },
    {
      FileName: TestViewModel.ObservableAsProperty.g.cs,
      Source:
// <auto-generated/>
#nullable enable

using System;
using ReactiveUI;

public partial class TestViewModel<T> where T : class
{
    private ObservableAsPropertyHelper<global::System.Collections.Generic.List<global::System.Collections.Generic.Dictionary<string, T>>> _complexPropertyHelper;

    public partial global::System.Collections.Generic.List<global::System.Collections.Generic.Dictionary<string, T>> ComplexProperty
    {
        get => _complexPropertyHelper.Value;
    }

    private ObservableAsPropertyHelper<global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.List<T>>> _nestedPropertyHelper;

    public partial global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.List<T>> NestedProperty
    {
        get => _nestedPropertyHelper.Value;
    }
}

    }
  ],
  Diagnostics: null
}